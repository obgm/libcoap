// -*- mode:doc; -*-
// vim: set syntax=asciidoc,tw=0:

coap_observe(3)
=================
:doctype: manpage
:man source:   coap_observe
:man version:  @PACKAGE_VERSION@
:man manual:   libcoap Manual

NAME
----
coap_observe, coap_resource_set_get_observable, coap_resource_notify_observers, 
coap_resource_get_uri_path, coap_find_observer - work with CoAP observe

SYNOPSIS
--------
*#include <coap/coap.h>*

*void coap_resource_set_get_observable(coap_resource_t *_resource_, 
int _mode_);*

*int coap_resource_notify_observers(coap_resource_t *_resource_, 
const const_string_t *_query_);*

*const str *coap_resource_get_uri_path(coap_resource_t *_resource_);*

*coap_subscription_t *coap_find_observer(coap_resource_t *_resource_, 
coap_session_t *_session_, const const_string_t *_token_);*

Link with *-lcoap-@LIBCOAP_API_VERSION@*, *-lcoap-@LIBCOAP_API_VERSION@-openssl*
or *-lcoap-@LIBCOAP_API_VERSION@-tinydtls* depending on your (D)TLS library
type.

DESCRIPTION
-----------
RFC 7641 extends the CoAP protocol to be able to monitor the state of a 
resource over time.

This enables clients to "observe" resources with a defined query, i.e., to 
retrieve a representation of a resource and keep this representation updated 
by the server over a period of time.

The server has to flag a resource as "observable", and then the client has 
to request in a GET request that it wants to observe this resource by the use 
of the COAP_OPTION_OBSERVE Option with a value of COAP_OBSERVE_ESTABLISH.
Optionally, the client can specify query options for the resource.

The underlying library adds in and removes "subscribers" to the resource as
appropriate in the server side logic.

Within the server application, it needs to determine that there is a change of 
state of the resource under observation, and then cause the CoAP library 
layer to initiate a "fake GET request" so that an unsolicited GET response 
gets sent back to all the clients that are observing the resource.  The 
appropriate GET handler within the server application is called to fill in the 
response packet with the appropriate information. 

The call to coap_write() in the main server application i/o loop will do all 
the necessary processing of sending any outstanding "fake GET requests".

Whenever the server sends a copy of the state of the "observed" resource to
the client, it will use the same token used by the client when the client 
requested the "observe".  The client will receive this unsolicited response
in the handler defined by coap_register_response_handler().  It is the 
responsibility of the client application to match the supplied token and 
update the appropriate internal information.

The *coap_resource_set_get_observable*() function enables or disables the 
observable status of the _resource_ by the setting of _mode_.  If _mode_ is 
1, then the _resource_ is observable.  If _mode_ is 0, then the 
_resource_ is no longer observable.

*NOTE:* It is not possible for the Unknown Resource, created by 
coap_resource_unknown_init(), to be observable as the Uri-Path is not known
when libcoap creates a "fake GET request".  The Unknown Resource PUT
handler must create a new resource and mark the resource as "observable" if
a specific resource needs to be observable.  The application must then
manage the deleteion of the resource at the appropriate time.

The *coap_resource_notify_observers*() function needs to be called whenever the 
server application determines that there has been a change to the state of 
_resource_, possibly only matching a specific _query_ if _query_ is not NULL.

The *coap_resource_get_uri_path*() function is used to obtain the UriPath of
the _resource_ definion.

The *coap_find_observer*() function is used to check whether the current GET 
request as determined from _resource_, _session_ and _token_ is currently 
being observed or not.

RETURN VALUES
-------------
The *coap_resource_get_uri_path*() function returns the uri_path or NULL if 
there was a failure.

The *coap_find_observer*() function returns the subscription or NULL if there 
was a failure. 

The *coap_resource_set_get_observable*() function return 0 on failure, 1 on 
success.

EXAMPLES
--------
*Simple Time Server*

[source, c]
--
#include <coap/coap.h>

coap_resource_t *time_resource = NULL;

static int check_if_time_resource_has_changed(coap_resource_t *resource) {
  return 1;
}

/* specific GET "time" handler, called from hnd_get_generic() */

static void
hnd_get_time(coap_context_t *ctx, coap_resource_t *resource,
coap_session_t *session, coap_pdu_t *request, coap_string_t *token,
coap_string_t *query, coap_pdu_t *response) {

  unsigned char buf[40];
  size_t len;
  time_t now;

  /* Define what the response code is going to be */
  response->code = COAP_RESPONSE_CODE(205);

  /* If the resource is being Observed, return with Observe set */
  if (coap_find_observer(resource, session, token)) {
    coap_add_option(response,
                    COAP_OPTION_OBSERVE,
                    coap_encode_var_safe(buf, sizeof(buf), resource->observe),
                    buf);
  }

  /* Response is in plain text format */
  coap_add_option(response,
                    COAP_OPTION_CONTENT_FORMAT,
                    coap_encode_var_safe(buf, sizeof(buf),
                                         COAP_MEDIATYPE_TEXT_PLAIN),
                    buf);

  /* Report on how long this response is valid for */
  coap_add_option(response,
                  COAP_OPTION_MAXAGE,
                  coap_encode_var_safe(buf, sizeof(buf), 0x01), buf);

  now = time(NULL);

  if (query != NULL && coap_string_equal(query, coap_make_str_const("secs"))) {
    /* Output secs since Jan 1 1970 */
    len = snprintf((char *)buf, sizeof(buf), "%lu", now);
    coap_add_data(response, len, buf);
  } else {
    /* Output human-readable time */
    struct tm *tmp;
    tmp = gmtime(&now);
    len = strftime((char *)buf, sizeof(buf), "%b %d %H:%M:%S", tmp);
    coap_add_data(response, len, buf);
  }

}

/* Generic GET handler */

static void
hnd_get_generic(coap_context_t *ctx, coap_resource_t *resource,
coap_session_t *session, coap_pdu_t *request, coap_string_t *token,
coap_string_t *query, coap_pdu_t *response) {

  coap_str_const_t *uri_path = coap_resource_get_uri_path(resource);

  if (!uri_path) {
    /* Unexpected Failure */
    response->code = COAP_RESPONSE_CODE(400);
    return;
  }

  /* Is this the "time" resource" ? */
  if (coap_string_equal(uri_path, coap_make_str_const("time"))) {
    hnd_get_time(ctx, resource, session, request, token, query,
                 response);
    return;
  }

  /* Other resources code */

  /* Failure response */
  response->code = COAP_RESPONSE_CODE(400);
}

/* Initialize generic GET handler */

static void
init_resources(coap_context_t *ctx)
{

  coap_resource_t *r;

  /* Create a resource to return return or update time */
  r = coap_resource_init(coap_make_str_const("time"),
                         COAP_RESOURCE_FLAGS_NOTIFY_CON);

  /* We are using a generic GET handler here */
  coap_register_handler(r, COAP_REQUEST_GET, hnd_get_generic);

  coap_resource_set_get_observable(r, 1);

  coap_add_resource(ctx, r);
  time_resource = r;

}


int main(int argc, char *argv[]){

  coap_context_t *ctx = NULL;
  coap_endpoint_t *ep = NULL;
  coap_address_t addr;
  unsigned wait_ms;

  /* Create the libcoap context */
  ctx = coap_new_context(NULL);
  if (!ctx) {
    exit(1);
  }
  coap_address_init(&addr);
  addr.addr.sa.sa_family = AF_INET;
  addr.addr.sin.sin_port = ntohs(COAP_DEFAULT_PORT);
  ep = coap_new_endpoint(ctx, &addr, COAP_PROTO_UDP);

  /* Other Set up Code */

  init_resources(ctx);

  wait_ms = COAP_RESOURCE_CHECK_TIME * 1000;

  while (1) {
    int result = coap_run_once(ctx, wait_ms);
    if ( result < 0 ) {
      break;
    } else if ((unsigned)result < wait_ms) {
      wait_ms -= result;
    } else {
      if (check_if_time_resource_has_changed(time_resource)) {
        coap_resource_notify_observers(time_resource, NULL);
      }
      wait_ms = COAP_RESOURCE_CHECK_TIME * 1000;
    }
  }
  exit(0);

}
--

*Client Observe Request Setup*

[source, c]
--
#include <coap/coap.h>

/* Usually, requests are sent confirmable */

static unsigned char msgtype = COAP_MESSAGE_CON;

static unsigned int token = 0;

static coap_pdu_t *
coap_new_request(coap_context_t *context, coap_session_t *session, char request_code,
coap_optlist_t **options, unsigned char *data, size_t length, int observe) {

  coap_pdu_t *pdu;
  coap_optlist_t *opt;
  (void)context;

  /* Create the pdu with the apropriate options */
  pdu = coap_pdu_init(msgtype, request_code, coap_new_message_id(session),
                      coap_session_max_pdu_size(session));
  if (!pdu)
    return NULL;

  /*
   * Create uniqueness token for this request for handling unsolicited /
   * delayed responses
   */
  token++;
  if (!coap_add_token(pdu, sizeof(token), (unsigned char*)&token)) {
    coap_log(LOG_DEBUG, "cannot add token to request\n");
    goto error;
  }

  if (request_code == COAP_REQUEST_GET && observe) {
    /* Indicate that we want to observe this resource */
    if (!coap_insert_optlist(options, 
                             coap_new_optlist(COAP_OPTION_OBSERVE,
                                         COAP_OBSERVE_ESTABLISH, NULL)))
      goto error;
  }

  /* ... Other code / options etc. ... */

  /* Add in all the options (after internal sorting) to the pdu */
  if (!coap_add_optlist_pdu(pdu, options))
    goto error;

  if (data && length) {
    /* Add in the specified data */
    if (!coap_add_data(pdu, length, data))
      goto error;
  }

  return pdu;

error:

  coap_delete_pdu(pdu);
  return NULL;

}
--

SEE ALSO
--------
*coap_attribute*(3), *coap_context*(3), *coap_handler*(3), *coap_pdu_setup*(3)
and *coap_resource*(3)

FURTHER INFORMATION
-------------------
"RFC7252: The Constrained Application Protocol (CoAP)"
"RFC7641: Observing Resources in the Constrained Application Protocol (CoAP)"

BUGS
----
Please report bugs on the mailing list for libcoap:
libcoap-developers@lists.sourceforge.net

AUTHORS
-------
The libcoap project <libcoap-developers@lists.sourceforge.net>
